CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

PROJECT(us_jni_api)

SET(CMAKE_POSITION_INDEPENDENT_CODE ON)

FILE(GLOB_RECURSE CURRENT_DIR_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/*.hpp ${CMAKE_CURRENT_SOURCE_DIR}/*.h)
FILE(MAKE_DIRECTORY ${PROJECT_INCLUDE_DIR}/jni)
FOREACH(include ${CURRENT_DIR_HEAD})
	MESSAGE("-- Copying ${include}")
	CONFIGURE_FILE(${include} ${PROJECT_INCLUDE_DIR}/jni COPYONLY)
ENDFOREACH()

INSTALL(FILES ${CURRENT_DIR_HEAD}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/include
)

FILE(GLOB_RECURSE CURRENT_DIR_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/*.cc ${CMAKE_CURRENT_SOURCE_DIR}/*.c)


LOAD_OPENCV()
LOAD_ANDROID_ENV()

SET(DEPENDENCY_INCLUDES
	${PROJECT_INCLUDE_DIR} 
	${PROJECT_INCLUDE_DIR}/jni
	${ANDROID_JIN_INCLUDE_DIR} 
)

SET(DEPENDENCY_LIBS
  ai_sdk
	core
	module_logger
	${ANDROID_JIN_LIBS}
)

IF(INFER_ENGINE STREQUAL NCNN)
	LOAD_NCNN()
	LIST(APPEND DEPENDENCY_INCLUDES ${NCNN_INCLUDE_DIR})
	LIST(APPEND DEPENDENCY_LIBS ${OpenMP_CXX_FLAGS} ${NCNN_LIBS})
	ADD_COMPILE_OPTIONS(-fopenmp)
ELSEIF(INFER_ENGINE STREQUAL ORT)
	LOAD_ONNXRUNTIME()
    LIST(APPEND DEPENDENCY_LIBS ${ONNXRUNTIME_LIBS})
	LIST(APPEND DEPENDENCY_INCLUDES ${ONNXRUNTIME_INCLUDE_DIR} ${ONNXRUNTIME_INCLUDE_DIR}/onnxruntime)
ELSE()
    MESSAGE(FATAL_ERROR "Invalid inference engine type ${INFER_ENGINE}")
ENDIF()

# Build Shared Library
ADD_LIBRARY(ai_sdk_jni SHARED ${CURRENT_DIR_SRCS})
TARGET_COMPILE_DEFINITIONS(ai_sdk_jni PRIVATE AI_WORKFLOW_BUILD_DLL)

TARGET_INCLUDE_DIRECTORIES(ai_sdk_jni PRIVATE ${DEPENDENCY_INCLUDES})
TARGET_LINK_LIBRARIES(ai_sdk_jni PRIVATE ${DEPENDENCY_LIBS})

SET_TARGET_PROPERTIES(ai_sdk_jni PROPERTIES
	VERSION 1.0.0
	SOVERSION 1
)

INSTALL(TARGETS ai_sdk_jni
    EXPORT ai_sdk_jni-targets
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin
)

INSTALL(EXPORT ai_sdk_jni-targets
    NAMESPACE ai_sdk_jni::
    DESTINATION lib/cmake/ai_sdk_jni
)
