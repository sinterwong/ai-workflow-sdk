CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

PROJECT(ai_pipe)

SET(CMAKE_POSITION_INDEPENDENT_CODE ON)

LOAD_OPENCV()

FILE(GLOB_RECURSE CURRENT_DIR_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/*.hpp ${CMAKE_CURRENT_SOURCE_DIR}/*.h)
FILE(MAKE_DIRECTORY ${PROJECT_INCLUDE_DIR}/ai_pipe)
FOREACH(include ${CURRENT_DIR_HEAD})
	MESSAGE("-- Copying ${include}")
	CONFIGURE_FILE(${include} ${PROJECT_INCLUDE_DIR}/ai_pipe COPYONLY)
ENDFOREACH()

FILE(GLOB_RECURSE CURRENT_DIR_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/*.cc)

SET(DEPENDENCY_INCLUDES
	${PROJECT_INCLUDE_DIR} 
	${PROJECT_INCLUDE_DIR}/ai_pipe
	${OpenCV_INCLUDE_DIRS} 
)

SET(DEPENDENCY_LIBS
	core
	module_logger
	${OpenCV_LIBS}
)

IF(INFER_ENGINE STREQUAL NCNN)
	LOAD_OPENMP()
	LOAD_NCNN()
	LIST(APPEND DEPENDENCY_INCLUDES ${NCNN_INCLUDE_DIR})
	LIST(APPEND DEPENDENCY_LIBS ${OpenMP_CXX_FLAGS} ${NCNN_LIBS})
	ADD_COMPILE_OPTIONS(-fopenmp)
	MESSAGE(INFO "Inference engine type is NCNN")
ELSEIF(INFER_ENGINE STREQUAL ORT)
	LOAD_ONNXRUNTIME()
	LIST(APPEND DEPENDENCY_LIBS ${ONNXRUNTIME_LIBS})
	LIST(APPEND DEPENDENCY_INCLUDES ${ONNXRUNTIME_INCLUDE_DIR} ${ONNXRUNTIME_INCLUDE_DIR}/onnxruntime)
	MESSAGE(INFO "Inference engine type is ONNXRuntime")
ELSE()
	MESSAGE(FATAL_ERROR "Invalid inference engine type ${INFER_ENGINE}")
ENDIF()

# Build Shared Library
ADD_LIBRARY(ai_pipe ${CURRENT_DIR_SRCS})
TARGET_INCLUDE_DIRECTORIES(ai_pipe PRIVATE ${DEPENDENCY_INCLUDES})
TARGET_LINK_LIBRARIES(ai_pipe PRIVATE ${DEPENDENCY_LIBS})
