CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(Tools)

LOAD_OPENCV()
LOAD_GTEST()
LOAD_GFLAGS()
LOAD_CRYPTOPP()

IF (TARGET_OS STREQUAL "Android")
    LOAD_ANDROID_ENV()
ENDIF()

SET(DEPENDENCY_INCLUDES
    ${PROJECT_INCLUDE_DIR}
    ${PROJECT_INCLUDE_DIR}/core
    ${OpenCV_INCLUDE_DIRS}
    ${GTEST_INCLUDE_DIRS}
    ${GFLAGS_INCLUDE_DIRS}
)

SET(DEPENDENCY_LIBS
    ai_sdk
    ai_pipe
    core
    cryptopp::cryptopp
    ${GFLAGS_LIBRARIES}
    ${OpenCV_LIBS}
    module_logger
    ${GTEST_LIBS}
    ${ANDROID_JIN_LIBS}
)

FILE(GLOB CURRENT_DIR_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/*.cc)

IF(INFER_ENGINE STREQUAL NCNN)
    LOAD_OPENMP()
	LOAD_NCNN()
	LIST(APPEND DEPENDENCY_INCLUDES ${NCNN_INCLUDE_DIR})
	LIST(APPEND DEPENDENCY_LIBS ${OpenMP_CXX_FLAGS} ${NCNN_LIBS})
	ADD_COMPILE_OPTIONS(-fopenmp)

    FILE(GLOB NCNN_DIR_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/ncnn/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/ncnn/*.cc)
	LIST(APPEND CURRENT_DIR_SRCS ${NCNN_DIR_SRCS})

    ADD_DEFINITIONS(-DUSE_NCNN)

ELSEIF(INFER_ENGINE STREQUAL ORT)
	LOAD_ONNXRUNTIME()
    LIST(APPEND DEPENDENCY_LIBS ${ONNXRUNTIME_LIBS})
	LIST(APPEND DEPENDENCY_INCLUDES ${ONNXRUNTIME_INCLUDE_DIR})

    FILE(GLOB ORT_DIR_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/ort/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/ort/*.cc)
	LIST(APPEND CURRENT_DIR_SRCS ${ORT_DIR_SRCS})

    ADD_DEFINITIONS(-DUSE_ORT)

ELSE()
    MESSAGE(FATAL_ERROR "Invalid inference engine type ${INFER_ENGINE}")
ENDIF()

MESSAGE(STATUS "APP SOURCES: ${CURRENT_DIR_SRCS}")

FILE(MAKE_DIRECTORY ${PROJECT_OUTPUT_DIR}/bin/tools)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_OUTPUT_DIR}/bin/tools)
FILE(GLOB_RECURSE APP_SOURCES *.cc)
MESSAGE(STATUS "APP SOURCES: ${APP_SOURCES}")
FOREACH(sourcefile ${APP_SOURCES})
    STRING(REGEX MATCH "[^/]+$" sourcefilewithoutpath ${sourcefile})
    STRING(REPLACE ".cc" "" testname ${sourcefilewithoutpath})
    ADD_EXECUTABLE( ${testname} ${sourcefile})
    TARGET_INCLUDE_DIRECTORIES(${testname} PRIVATE ${DEPENDENCY_INCLUDES})
    TARGET_LINK_LIBRARIES(${testname} PRIVATE ${DEPENDENCY_LIBS})
    INSTALL(TARGETS ${testname} DESTINATION tools)

ENDFOREACH(sourcefile ${APP_SOURCES})